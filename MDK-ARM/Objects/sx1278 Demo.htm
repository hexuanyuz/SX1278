<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\sx1278 Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\sx1278 Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jul 23 15:30:43 2024
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SX1276Process &rArr; SX1276FskProcess &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DMA1_Channel1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from stm32f0xx_it.o(i.ADC1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from stm32f0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from stm32f0xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[25]">SX1276GetRxPacket</a> from sx1276.o(i.SX1276GetRxPacket) referenced from radio.o(i.RadioDriverInit)
 <LI><a href="#[21]">SX1276Init</a> from sx1276.o(i.SX1276Init) referenced from radio.o(i.RadioDriverInit)
 <LI><a href="#[27]">SX1276Process</a> from sx1276.o(i.SX1276Process) referenced from radio.o(i.RadioDriverInit)
 <LI><a href="#[22]">SX1276Reset</a> from sx1276.o(i.SX1276Reset) referenced from radio.o(i.RadioDriverInit)
 <LI><a href="#[26]">SX1276SetTxPacket</a> from sx1276.o(i.SX1276SetTxPacket) referenced from radio.o(i.RadioDriverInit)
 <LI><a href="#[23]">SX1276StartRx</a> from sx1276.o(i.SX1276StartRx) referenced from radio.o(i.RadioDriverInit)
 <LI><a href="#[24]">SX1276StartTx</a> from sx1276.o(i.SX1276StartTx) referenced from radio.o(i.RadioDriverInit)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from stm32f0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2a]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[9f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_Configration
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetTxPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacket
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetTxPacket
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRxPacket
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
</UL>

<P><STRONG><a name="[60]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[a8]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[aa]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[ab]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ac]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[32]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[3e]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.ADC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ComputeCrc</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, crc.o(i.ComputeCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioComputeCRC
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
</UL>

<P><STRONG><a name="[44]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
</UL>

<P><STRONG><a name="[88]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio0
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
</UL>

<P><STRONG><a name="[4c]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>

<P><STRONG><a name="[42]"></a>GPIO_int</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, gpio.o(i.GPIO_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_int &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[4d]"></a>HAL_Delay_nMs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.HAL_Delay_nMs))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>

<P><STRONG><a name="[46]"></a>HW_Int</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.HW_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_Int &rArr; GPIO_int &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Int
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_Configration
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LedToggle</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.LedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_nMs
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OnMaster</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, main.o(i.OnMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OnMaster &rArr; RadioComputeCRC &rArr; ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioComputeCRC
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>OnSlave</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, main.o(i.OnSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OnSlave &rArr; RadioComputeCRC &rArr; ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioComputeCRC
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[53]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[54]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[49]"></a>RCC_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[92]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[90]"></a>RCC_PLLCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[91]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[93]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[4f]"></a>RadioComputeCRC</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, crc.o(i.RadioComputeCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RadioComputeCRC &rArr; ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
</UL>

<P><STRONG><a name="[98]"></a>RadioDriverInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, radio.o(i.RadioDriverInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI2_Int</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, spi.o(i.SPI2_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI2_Int &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxFIFOThresholdConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[58]"></a>SPI_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Int
</UL>

<P><STRONG><a name="[8d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInputOutput_Data
</UL>

<P><STRONG><a name="[56]"></a>SPI_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f0xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Int
</UL>

<P><STRONG><a name="[8f]"></a>SPI_ReceiveData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInputOutput_Data
</UL>

<P><STRONG><a name="[57]"></a>SPI_RxFIFOThresholdConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_RxFIFOThresholdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Int
</UL>

<P><STRONG><a name="[8e]"></a>SPI_SendData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInputOutput_Data
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SX1276FskGetPacketPayloadSize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sx1276-fsk.o(i.SX1276FskGetPacketPayloadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276FskGetPacketPayloadSize
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[59]"></a>SX1276FskGetRxPacket</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276-fsk.o(i.SX1276FskGetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276FskGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
</UL>

<P><STRONG><a name="[5b]"></a>SX1276FskProcess</STRONG> (Thumb, 876 bytes, Stack size 24 bytes, sx1276-fsk.o(i.SX1276FskProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276FskProcess &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio0
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetPacketPayloadSize
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRxGain
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[66]"></a>SX1276FskReadAfc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx1276-fsk.o(i.SX1276FskReadAfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276FskReadAfc &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[65]"></a>SX1276FskReadRssi</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276-fsk.o(i.SX1276FskReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276FskReadRssi &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[67]"></a>SX1276FskReadRxGain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276-fsk.o(i.SX1276FskReadRxGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276FskReadRxGain &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiReadData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[5e]"></a>SX1276FskSetOpMode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx1276-fsk.o(i.SX1276FskSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276FskSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteRxTx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[8b]"></a>SX1276FskSetRFState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276-fsk.o(i.SX1276FskSetRFState))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
</UL>

<P><STRONG><a name="[70]"></a>SX1276FskSetTxPacket</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276-fsk.o(i.SX1276FskSetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276FskSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
</UL>

<P><STRONG><a name="[25]"></a>SX1276GetRxPacket</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276.o(i.SX1276GetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276GetRxPacket &rArr; SX1276LoRaGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaGetRxPacket
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskGetRxPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[21]"></a>SX1276Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276Init &rArr; SX1276LoRaInit &rArr; SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[71]"></a>SX1276LoRaGetRxPacket</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaGetRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276LoRaGetRxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetRxPacket
</UL>

<P><STRONG><a name="[74]"></a>SX1276LoRaInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX1276LoRaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276LoRaInit &rArr; SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[82]"></a>SX1276LoRaProcess</STRONG> (Thumb, 1168 bytes, Stack size 24 bytes, sx1276-lora.o(i.SX1276LoRaProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276LoRaProcess &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadDio0
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReadRxGain
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Process
</UL>

<P><STRONG><a name="[83]"></a>SX1276LoRaReadRxGain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaReadRxGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276LoRaReadRxGain &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiReadData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
</UL>

<P><STRONG><a name="[75]"></a>SX1276LoRaSetDefaults</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaSetDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276LoRaSetDefaults &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiReadData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[78]"></a>SX1276LoRaSetErrorCoding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetErrorCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetErrorCoding &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[7b]"></a>SX1276LoRaSetImplicitHeaderOn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetImplicitHeaderOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetImplicitHeaderOn &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[7e]"></a>SX1276LoRaSetLowDatarateOptimize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetLowDatarateOptimize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetLowDatarateOptimize &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[84]"></a>SX1276LoRaSetNbTrigPeaks</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetNbTrigPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
</UL>

<P><STRONG><a name="[72]"></a>SX1276LoRaSetOpMode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx1276-lora.o(i.SX1276LoRaSetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteRxTx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[7f]"></a>SX1276LoRaSetPAOutput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPAOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetPAOutput &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[80]"></a>SX1276LoRaSetPa20dBm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPa20dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetPa20dBm &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[79]"></a>SX1276LoRaSetPacketCrcOn</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPacketCrcOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetPacketCrcOn &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[7d]"></a>SX1276LoRaSetPayloadLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276LoRaSetPayloadLength &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[76]"></a>SX1276LoRaSetRFFrequency</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sx1276-loramisc.o(i.SX1276LoRaSetRFFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276LoRaSetRFFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[81]"></a>SX1276LoRaSetRFPower</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetRFPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetRFPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[8a]"></a>SX1276LoRaSetRFState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276-lora.o(i.SX1276LoRaSetRFState))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartTx
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartRx
</UL>

<P><STRONG><a name="[7a]"></a>SX1276LoRaSetSignalBandwidth</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSignalBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276LoRaSetSignalBandwidth &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[77]"></a>SX1276LoRaSetSpreadingFactor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSpreadingFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276LoRaSetSpreadingFactor &rArr; SX1276LoRaSetNbTrigPeaks &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[7c]"></a>SX1276LoRaSetSymbTimeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276-loramisc.o(i.SX1276LoRaSetSymbTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276LoRaSetSymbTimeout &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
</UL>

<P><STRONG><a name="[85]"></a>SX1276LoRaSetTxPacket</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276-lora.o(i.SX1276LoRaSetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276LoRaSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxPacket
</UL>

<P><STRONG><a name="[27]"></a>SX1276Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276Process &rArr; SX1276FskProcess &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[6e]"></a>SX1276Read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; SpiReadData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaReadRxGain
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRxGain
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadRssi
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetDefaults
</UL>

<P><STRONG><a name="[6d]"></a>SX1276ReadBuffer</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sx1276-hal.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276ReadBuffer &rArr; SpiReadData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInputOutput_Data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskReadAfc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
</UL>

<P><STRONG><a name="[6a]"></a>SX1276ReadDio0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276ReadDio0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276ReadDio0
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[68]"></a>SX1276ReadDio1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276ReadDio1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276ReadDio1
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[64]"></a>SX1276ReadDio2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276ReadDio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276ReadDio2
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[6b]"></a>SX1276ReadDio3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276ReadDio3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276ReadDio3
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[63]"></a>SX1276ReadDio4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276ReadDio4))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[69]"></a>SX1276ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; SpiReadData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[22]"></a>SX1276Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276Reset &rArr; SX1276SetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[73]"></a>SX1276SetLoRaOn</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetLoRaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetLoRaOn &rArr; SX1276LoRaSetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[89]"></a>SX1276SetReset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276SetReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276SetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[26]"></a>SX1276SetTxPacket</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276SetTxPacket &rArr; SX1276LoRaSetTxPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetTxPacket
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetTxPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[23]"></a>SX1276StartRx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276StartRx
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[24]"></a>SX1276StartTx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276StartTx
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetRFState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioDriverInit)
</UL>
<P><STRONG><a name="[62]"></a>SX1276Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1276-hal.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetNbTrigPeaks
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSpreadingFactor
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSignalBandwidth
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFPower
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPayloadLength
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPacketCrcOn
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPa20dBm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetPAOutput
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetLowDatarateOptimize
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetImplicitHeaderOn
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetErrorCoding
</UL>

<P><STRONG><a name="[5d]"></a>SX1276WriteBuffer</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sx1276-hal.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInputOutput_Data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetLoRaOn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetSymbTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetRFFrequency
</UL>

<P><STRONG><a name="[6c]"></a>SX1276WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-hal.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[6f]"></a>SX1276WriteRxTx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-hal.o(i.SX1276WriteRxTx))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaSetOpMode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskSetOpMode
</UL>

<P><STRONG><a name="[86]"></a>SpiInputOutput_Data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, spi.o(i.SpiInputOutput_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadData
</UL>

<P><STRONG><a name="[87]"></a>SpiReadData</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sx1276-hal.o(i.SpiReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiReadData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInputOutput_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[8c]"></a>SpiWriteData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sx1276-hal.o(i.SpiWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiWriteData &rArr; SpiInputOutput_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInputOutput_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>

<P><STRONG><a name="[47]"></a>SysClock_48</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.SysClock_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysClock_48 &rArr; RCC_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>Tick_Configration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.Tick_Configration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Tick_Configration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>

<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5c]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1276-fsk.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276LoRaProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>

<P><STRONG><a name="[af]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = main &rArr; OnMaster &rArr; RadioComputeCRC &rArr; ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDriverInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioComputeCRC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSlave
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMaster
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[61]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276FskProcess
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[94]"></a>SetSysClock</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
